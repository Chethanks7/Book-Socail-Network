package com.Book_social_Network.user;

import com.Book_social_Network.book.Book;
import com.Book_social_Network.feedback.Feedback;
import com.Book_social_Network.history.BookTransactionHistory;
import com.Book_social_Network.role.Role;
import jakarta.persistence.*;
import lombok.*;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import javax.security.auth.Subject;
import java.io.Serial;
import java.io.Serializable;
import java.security.Principal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

@Getter
@Setter
@Table(name = "users") // Specifies the table name in the database.
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Entity // Indicates that this class is a JPA entity.
@EntityListeners(AuditingEntityListener.class) // Enables auditing features for this entity.
public class User implements UserDetails, Principal, Serializable {

    @Getter
    @Serial
    private static final long serialVersionUID = new Random().nextLong() + 100000000000L; // Serial version UID for serialization.

    @Id // Specifies the primary key of the entity.
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Indicates that the primary key will be generated by the database.
    private Integer id; // Unique identifier for the user.

    private String firstname; // User's first name.
    private String lastname; // User's last name.
    private LocalDate birthday; // User's date of birth.

    @Column(unique = true) // Ensures that the phone number is unique in the database.
    private String phone; // User's phone number.

    @Column(unique = true) // Ensures that the email is unique in the database.
    private String email; // User's email address.

    private String password; // User's password.
    private boolean enabled; // Indicates whether the user account is enabled.
    private boolean accountLocked; // Indicates whether the user account is locked.

    @ManyToMany(fetch = FetchType.EAGER) // Defines a many-to-many relationship with Role.
    private List<Role> roles; // Roles assigned to the user.

    @OneToMany(mappedBy = "owner")
    List<Book> books;

    @OneToMany(mappedBy = "user")
    private List<BookTransactionHistory> histories ;

    @CreatedDate // Automatically sets the creation timestamp.
    @Column(nullable = false, updatable = false) // Column is non-nullable and not updatable.
    private LocalDateTime createdTime; // Timestamp for when the user was created.

    @LastModifiedDate // Automatically sets the last modified timestamp.
    @Column(insertable = false) // Column is not insertable (set automatically).
    private LocalDateTime lastUpdatedTime; // Timestamp for when the user was last modified.

    // Returns a collection of authorities granted to the user.
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return this.roles
                .stream()
                .map(role -> new SimpleGrantedAuthority(role.getName())) // Maps roles to GrantedAuthority.
                .collect(Collectors.toList());
    }

    // Returns the user's password (not implemented in this context).
    @Override
    public String getPassword() {
        return password; // Returns the actual password.
    }

    // Returns the user's email as the username.
    @Override
    public String getUsername() {
        return email; // Returns the email as the username.
    }

    @Override
    public boolean isAccountNonExpired() {
        return true; // Indicates the account is non-expired.
    }

    @Override
    public boolean isAccountNonLocked() {
        return !accountLocked; // Indicates if the account is not locked.
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true; // Indicates the credentials are non-expired.
    }

    @Override
    public boolean isEnabled() {
        return enabled; // Returns whether the account is enabled.
    }

    @Override
    public String getName() {
        return email; // Returns the user's email as the name.
    }

    @Override
    public boolean implies(Subject subject) {
        return Principal.super.implies(subject); // Default implementation for implies.
    }

    // Returns the full name of the user.
    public String fullName() {
        return firstname + " " + lastname; // Concatenates first and last name.
    }
}
